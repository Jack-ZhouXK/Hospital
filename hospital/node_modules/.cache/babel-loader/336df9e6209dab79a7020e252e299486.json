{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ZXK/Desktop/hospital/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      //这是登录表单的数据绑定对象\n      loginForm: {\n        username: 'admin',\n        password: 'admin123'\n      },\n      ////表单验证规则对象,数据的校验规则\n      loginFormRules: {\n        //验证用户名是否合法\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: '长度在 3 到 10 个字符',\n          trigger: 'blur'\n        }],\n        //验证密码是否合法\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 15,\n          message: '长度在 6 到 15 个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    //点击重置按钮,重置登录表单\n    resetLoginForm: function resetLoginForm() {\n      this.$refs.loginFormRef.resetFields();\n    },\n    //登录按钮表单预验证\n    login: function login() {\n      var _this = this;\n\n      this.$refs.loginFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(valid) {\n          var _yield$_this$$http$po, res;\n\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (valid) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 2:\n                  _context.next = 4;\n                  return _this.$http.post('user/login', _this.loginForm);\n\n                case 4:\n                  _yield$_this$$http$po = _context.sent;\n                  res = _yield$_this$$http$po.data;\n\n                  if (res.success) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", _this.$message.error('登录失败'));\n\n                case 8:\n                  _this.$message.success('登录成功'); //保存到sessionStroge中,当前浏览器打开时候生效\n\n\n                  window.sessionStorage.setItem('token', res.message); //通过编程式导航跳转到后台首页,路由地址为/home\n\n                  _this.$router.push('/home');\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACAA,MADA,kBACA;AACA;AACA;AACAC;AACAC,yBADA;AAEAC;AAFA,OAFA;AAMA;AACAC;AACA;AACAF,mBACA;AAAAG;AAAAC;AAAAC;AAAA,SADA,EAEA;AACAC,gBADA;AAEAC,iBAFA;AAGAH,mCAHA;AAIAC;AAJA,SAFA,CAFA;AAWA;AACAJ,mBACA;AAAAE;AAAAC;AAAAC;AAAA,SADA,EAEA;AACAC,gBADA;AAEAC,iBAFA;AAGAH,mCAHA;AAIAC;AAJA,SAFA;AAZA;AAPA;AA8BA,GAhCA;AAiCAG;AACA;AACAC,kBAFA,4BAEA;AACA;AACA,KAJA;AAKA;AACAC,SANA,mBAMA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACAC,KADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,yBAKA,iBACA,YADA,EAEA,eAFA,CALA;;AAAA;AAAA;AAKAC,qBALA,yBAKAd,IALA;;AAAA,sBASAc,WATA;AAAA;AAAA;AAAA;;AAAA,mDAUA,4BAVA;;AAAA;AAYA,iDAZA,CAaA;;;AACAC,sEAdA,CAeA;;AACA;;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkBA;AAzBA;AAjCA","names":["data","loginForm","username","password","loginFormRules","required","message","trigger","min","max","methods","resetLoginForm","login","valid","res","window"],"sourceRoot":"src/components","sources":["login.vue"],"sourcesContent":["<template>\n  <div class=\"login_container\">\n    <div class=\"login_box\">\n      <div class=\"avater_box\">\n        <img src=\"../assets/logo.png\" alt=\"\" />\n      </div>\n      <el-form\n        ref=\"loginFormRef\"\n        class=\"login_form\"\n        :model=\"loginForm\"\n        :rules=\"loginFormRules\"\n      >\n        <!-- 用户名 -->\n        <el-form-item prop=\"username\">\n          <el-input\n            prefix-icon=\"el-icon-user\"\n            v-model=\"loginForm.username\"\n          ></el-input>\n        </el-form-item>\n        <!-- 密码 -->\n        <el-form-item prop=\"password\">\n          <el-input\n            prefix-icon=\"el-icon-goods\"\n            v-model=\"loginForm.password\"\n            type=\"password\"\n          ></el-input>\n        </el-form-item>\n        <!-- 按钮 -->\n        <el-form-item class=\"btns\">\n          <el-button type=\"primary\" @click=\"login\">登录</el-button>\n          <el-button type=\"info\" @click=\"resetLoginForm\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n\n<script>\nexport default {\n  data() {\n    return {\n      //这是登录表单的数据绑定对象\n      loginForm: {\n        username: 'admin',\n        password: 'admin123',\n      },\n      ////表单验证规则对象,数据的校验规则\n      loginFormRules: {\n        //验证用户名是否合法\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          {\n            min: 3,\n            max: 10,\n            message: '长度在 3 到 10 个字符',\n            trigger: 'blur',\n          },\n        ],\n        //验证密码是否合法\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          {\n            min: 6,\n            max: 15,\n            message: '长度在 6 到 15 个字符',\n            trigger: 'blur',\n          },\n        ],\n      },\n    }\n  },\n  methods: {\n    //点击重置按钮,重置登录表单\n    resetLoginForm() {\n      this.$refs.loginFormRef.resetFields()\n    },\n    //登录按钮表单预验证\n    login() {\n        this.$refs.loginFormRef.validate(async (valid) => {\n          if (!valid) {\n            return\n          }\n        //发送请求,发生Promise解决方案把参数变成异步,该参数等待即可\n        const { data: res } = await this.$http.post(\n          'user/login',\n          this.loginForm\n        )\n        if (!res.success) {\n          return this.$message.error('登录失败')\n        }\n        this.$message.success('登录成功')\n        //保存到sessionStroge中,当前浏览器打开时候生效\n        window.sessionStorage.setItem('token', res.message)\n        //通过编程式导航跳转到后台首页,路由地址为/home\n        this.$router.push('/home')\n      })\n    },\n  },\n}\n</script>\n\n\n\n\n<style lang=\"less\" scoped>      \n.login_container {\n  background-color: #2b4b6b;\n  height: 100%;\n}\n.login_box {\n  width: 450px;\n  height: 300px;\n  background-color: #fff;\n  border-radius: 3px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n\n  //less 语法嵌套\n  .avater_box {\n    height: 130px;\n    width: 130px;\n    border: 1px solid #eee;\n    border-radius: 50%;\n    padding: 10px;\n    box-shadow: 0 0 10px #ddd;\n    position: absolute;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #fff;\n    img {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background-color: #eee;\n    }\n  }\n  .btns {\n    display: flex;\n    justify-content: flex-end;\n  }\n  .login_form {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    padding: 0 20px;\n    box-sizing: border-box;\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}